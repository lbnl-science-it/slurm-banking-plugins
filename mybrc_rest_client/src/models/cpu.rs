/* 
 * myBRC REST API
 *
 * REST API for myBRC
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Cpu {
  #[serde(rename = "timestamp")]
  timestamp: String,
  #[serde(rename = "host")]
  host: ::models::Node,
  #[serde(rename = "usage_guest")]
  usage_guest: Option<f32>,
  #[serde(rename = "usage_guest_nice")]
  usage_guest_nice: Option<f32>,
  #[serde(rename = "usage_idle")]
  usage_idle: Option<f32>,
  #[serde(rename = "usage_iowait")]
  usage_iowait: Option<f32>,
  #[serde(rename = "usage_irq")]
  usage_irq: Option<f32>,
  #[serde(rename = "usage_nice")]
  usage_nice: Option<f32>,
  #[serde(rename = "usage_softirq")]
  usage_softirq: Option<f32>,
  #[serde(rename = "usage_steal")]
  usage_steal: Option<f32>,
  #[serde(rename = "usage_system")]
  usage_system: Option<f32>,
  #[serde(rename = "usage_user")]
  usage_user: Option<f32>
}

impl Cpu {
  pub fn new(timestamp: String, host: ::models::Node) -> Cpu {
    Cpu {
      timestamp: timestamp,
      host: host,
      usage_guest: None,
      usage_guest_nice: None,
      usage_idle: None,
      usage_iowait: None,
      usage_irq: None,
      usage_nice: None,
      usage_softirq: None,
      usage_steal: None,
      usage_system: None,
      usage_user: None
    }
  }

  pub fn set_timestamp(&mut self, timestamp: String) {
    self.timestamp = timestamp;
  }

  pub fn with_timestamp(mut self, timestamp: String) -> Cpu {
    self.timestamp = timestamp;
    self
  }

  pub fn timestamp(&self) -> &String {
    &self.timestamp
  }


  pub fn set_host(&mut self, host: ::models::Node) {
    self.host = host;
  }

  pub fn with_host(mut self, host: ::models::Node) -> Cpu {
    self.host = host;
    self
  }

  pub fn host(&self) -> &::models::Node {
    &self.host
  }


  pub fn set_usage_guest(&mut self, usage_guest: f32) {
    self.usage_guest = Some(usage_guest);
  }

  pub fn with_usage_guest(mut self, usage_guest: f32) -> Cpu {
    self.usage_guest = Some(usage_guest);
    self
  }

  pub fn usage_guest(&self) -> Option<&f32> {
    self.usage_guest.as_ref()
  }

  pub fn reset_usage_guest(&mut self) {
    self.usage_guest = None;
  }

  pub fn set_usage_guest_nice(&mut self, usage_guest_nice: f32) {
    self.usage_guest_nice = Some(usage_guest_nice);
  }

  pub fn with_usage_guest_nice(mut self, usage_guest_nice: f32) -> Cpu {
    self.usage_guest_nice = Some(usage_guest_nice);
    self
  }

  pub fn usage_guest_nice(&self) -> Option<&f32> {
    self.usage_guest_nice.as_ref()
  }

  pub fn reset_usage_guest_nice(&mut self) {
    self.usage_guest_nice = None;
  }

  pub fn set_usage_idle(&mut self, usage_idle: f32) {
    self.usage_idle = Some(usage_idle);
  }

  pub fn with_usage_idle(mut self, usage_idle: f32) -> Cpu {
    self.usage_idle = Some(usage_idle);
    self
  }

  pub fn usage_idle(&self) -> Option<&f32> {
    self.usage_idle.as_ref()
  }

  pub fn reset_usage_idle(&mut self) {
    self.usage_idle = None;
  }

  pub fn set_usage_iowait(&mut self, usage_iowait: f32) {
    self.usage_iowait = Some(usage_iowait);
  }

  pub fn with_usage_iowait(mut self, usage_iowait: f32) -> Cpu {
    self.usage_iowait = Some(usage_iowait);
    self
  }

  pub fn usage_iowait(&self) -> Option<&f32> {
    self.usage_iowait.as_ref()
  }

  pub fn reset_usage_iowait(&mut self) {
    self.usage_iowait = None;
  }

  pub fn set_usage_irq(&mut self, usage_irq: f32) {
    self.usage_irq = Some(usage_irq);
  }

  pub fn with_usage_irq(mut self, usage_irq: f32) -> Cpu {
    self.usage_irq = Some(usage_irq);
    self
  }

  pub fn usage_irq(&self) -> Option<&f32> {
    self.usage_irq.as_ref()
  }

  pub fn reset_usage_irq(&mut self) {
    self.usage_irq = None;
  }

  pub fn set_usage_nice(&mut self, usage_nice: f32) {
    self.usage_nice = Some(usage_nice);
  }

  pub fn with_usage_nice(mut self, usage_nice: f32) -> Cpu {
    self.usage_nice = Some(usage_nice);
    self
  }

  pub fn usage_nice(&self) -> Option<&f32> {
    self.usage_nice.as_ref()
  }

  pub fn reset_usage_nice(&mut self) {
    self.usage_nice = None;
  }

  pub fn set_usage_softirq(&mut self, usage_softirq: f32) {
    self.usage_softirq = Some(usage_softirq);
  }

  pub fn with_usage_softirq(mut self, usage_softirq: f32) -> Cpu {
    self.usage_softirq = Some(usage_softirq);
    self
  }

  pub fn usage_softirq(&self) -> Option<&f32> {
    self.usage_softirq.as_ref()
  }

  pub fn reset_usage_softirq(&mut self) {
    self.usage_softirq = None;
  }

  pub fn set_usage_steal(&mut self, usage_steal: f32) {
    self.usage_steal = Some(usage_steal);
  }

  pub fn with_usage_steal(mut self, usage_steal: f32) -> Cpu {
    self.usage_steal = Some(usage_steal);
    self
  }

  pub fn usage_steal(&self) -> Option<&f32> {
    self.usage_steal.as_ref()
  }

  pub fn reset_usage_steal(&mut self) {
    self.usage_steal = None;
  }

  pub fn set_usage_system(&mut self, usage_system: f32) {
    self.usage_system = Some(usage_system);
  }

  pub fn with_usage_system(mut self, usage_system: f32) -> Cpu {
    self.usage_system = Some(usage_system);
    self
  }

  pub fn usage_system(&self) -> Option<&f32> {
    self.usage_system.as_ref()
  }

  pub fn reset_usage_system(&mut self) {
    self.usage_system = None;
  }

  pub fn set_usage_user(&mut self, usage_user: f32) {
    self.usage_user = Some(usage_user);
  }

  pub fn with_usage_user(mut self, usage_user: f32) -> Cpu {
    self.usage_user = Some(usage_user);
    self
  }

  pub fn usage_user(&self) -> Option<&f32> {
    self.usage_user.as_ref()
  }

  pub fn reset_usage_user(&mut self) {
    self.usage_user = None;
  }

}



