/* 
 * Snippets API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Account {
  #[serde(rename = "accountid")]
  accountid: Option<String>,
  #[serde(rename = "users")]
  users: Option<Vec<String>>,
  #[serde(rename = "accountallocation")]
  accountallocation: Option<i32>,
  #[serde(rename = "description")]
  description: Option<String>
}

impl Account {
  pub fn new() -> Account {
    Account {
      accountid: None,
      users: None,
      accountallocation: None,
      description: None
    }
  }

  pub fn set_accountid(&mut self, accountid: String) {
    self.accountid = Some(accountid);
  }

  pub fn with_accountid(mut self, accountid: String) -> Account {
    self.accountid = Some(accountid);
    self
  }

  pub fn accountid(&self) -> Option<&String> {
    self.accountid.as_ref()
  }

  pub fn reset_accountid(&mut self) {
    self.accountid = None;
  }

  pub fn set_users(&mut self, users: Vec<String>) {
    self.users = Some(users);
  }

  pub fn with_users(mut self, users: Vec<String>) -> Account {
    self.users = Some(users);
    self
  }

  pub fn users(&self) -> Option<&Vec<String>> {
    self.users.as_ref()
  }

  pub fn reset_users(&mut self) {
    self.users = None;
  }

  pub fn set_accountallocation(&mut self, accountallocation: i32) {
    self.accountallocation = Some(accountallocation);
  }

  pub fn with_accountallocation(mut self, accountallocation: i32) -> Account {
    self.accountallocation = Some(accountallocation);
    self
  }

  pub fn accountallocation(&self) -> Option<&i32> {
    self.accountallocation.as_ref()
  }

  pub fn reset_accountallocation(&mut self) {
    self.accountallocation = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> Account {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

}



