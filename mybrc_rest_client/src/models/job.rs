/*
 * myBRC REST API
 *
 * REST API for myBRC
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Job {
    #[serde(rename = "jobslurmid")]
    jobslurmid: String,
    #[serde(rename = "submitdate")]
    submitdate: Option<String>,
    #[serde(rename = "startdate")]
    startdate: Option<String>,
    #[serde(rename = "enddate")]
    enddate: Option<String>,
    #[serde(rename = "userid")]
    userid: String,
    #[serde(rename = "accountid")]
    accountid: String,
    #[serde(rename = "amount")]
    amount: Option<String>,
    #[serde(rename = "jobstatus")]
    jobstatus: Option<String>,
    #[serde(rename = "partition")]
    partition: Option<String>,
    #[serde(rename = "qos")]
    qos: Option<String>,
    #[serde(rename = "nodes")]
    nodes: Option<Vec<::models::Node>>,
    #[serde(rename = "num_cpus")]
    num_cpus: Option<i32>,
    #[serde(rename = "num_req_nodes")]
    num_req_nodes: Option<i32>,
    #[serde(rename = "num_alloc_nodes")]
    num_alloc_nodes: Option<i32>,
    #[serde(rename = "raw_time")]
    raw_time: Option<f32>,
    #[serde(rename = "cpu_time")]
    cpu_time: Option<f32>,
}

impl Job {
    pub fn new(jobslurmid: String, userid: String, accountid: String) -> Job {
        Job {
            jobslurmid: jobslurmid,
            submitdate: None,
            startdate: None,
            enddate: None,
            userid: userid,
            accountid: accountid,
            amount: None,
            jobstatus: None,
            partition: None,
            qos: None,
            nodes: None,
            num_cpus: None,
            num_req_nodes: None,
            num_alloc_nodes: None,
            raw_time: None,
            cpu_time: None,
        }
    }

    pub fn set_jobslurmid(&mut self, jobslurmid: String) {
        self.jobslurmid = jobslurmid;
    }

    pub fn with_jobslurmid(mut self, jobslurmid: String) -> Job {
        self.jobslurmid = jobslurmid;
        self
    }

    pub fn jobslurmid(&self) -> &String {
        &self.jobslurmid
    }

    pub fn set_submitdate(&mut self, submitdate: String) {
        self.submitdate = Some(submitdate);
    }

    pub fn with_submitdate(mut self, submitdate: String) -> Job {
        self.submitdate = Some(submitdate);
        self
    }

    pub fn submitdate(&self) -> Option<&String> {
        self.submitdate.as_ref()
    }

    pub fn reset_submitdate(&mut self) {
        self.submitdate = None;
    }

    pub fn set_startdate(&mut self, startdate: String) {
        self.startdate = Some(startdate);
    }

    pub fn with_startdate(mut self, startdate: String) -> Job {
        self.startdate = Some(startdate);
        self
    }

    pub fn startdate(&self) -> Option<&String> {
        self.startdate.as_ref()
    }

    pub fn reset_startdate(&mut self) {
        self.startdate = None;
    }

    pub fn set_enddate(&mut self, enddate: String) {
        self.enddate = Some(enddate);
    }

    pub fn with_enddate(mut self, enddate: String) -> Job {
        self.enddate = Some(enddate);
        self
    }

    pub fn enddate(&self) -> Option<&String> {
        self.enddate.as_ref()
    }

    pub fn reset_enddate(&mut self) {
        self.enddate = None;
    }

    pub fn set_userid(&mut self, userid: String) {
        self.userid = userid;
    }

    pub fn with_userid(mut self, userid: String) -> Job {
        self.userid = userid;
        self
    }

    pub fn userid(&self) -> &String {
        &self.userid
    }

    pub fn set_accountid(&mut self, accountid: String) {
        self.accountid = accountid;
    }

    pub fn with_accountid(mut self, accountid: String) -> Job {
        self.accountid = accountid;
        self
    }

    pub fn accountid(&self) -> &String {
        &self.accountid
    }

    pub fn set_amount(&mut self, amount: String) {
        self.amount = Some(amount);
    }

    pub fn with_amount(mut self, amount: String) -> Job {
        self.amount = Some(amount);
        self
    }

    pub fn amount(&self) -> Option<&String> {
        self.amount.as_ref()
    }

    pub fn reset_amount(&mut self) {
        self.amount = None;
    }

    pub fn set_jobstatus(&mut self, jobstatus: String) {
        self.jobstatus = Some(jobstatus);
    }

    pub fn with_jobstatus(mut self, jobstatus: String) -> Job {
        self.jobstatus = Some(jobstatus);
        self
    }

    pub fn jobstatus(&self) -> Option<&String> {
        self.jobstatus.as_ref()
    }

    pub fn reset_jobstatus(&mut self) {
        self.jobstatus = None;
    }

    pub fn set_partition(&mut self, partition: String) {
        self.partition = Some(partition);
    }

    pub fn with_partition(mut self, partition: String) -> Job {
        self.partition = Some(partition);
        self
    }

    pub fn partition(&self) -> Option<&String> {
        self.partition.as_ref()
    }

    pub fn reset_partition(&mut self) {
        self.partition = None;
    }

    pub fn set_qos(&mut self, qos: String) {
        self.qos = Some(qos);
    }

    pub fn with_qos(mut self, qos: String) -> Job {
        self.qos = Some(qos);
        self
    }

    pub fn qos(&self) -> Option<&String> {
        self.qos.as_ref()
    }

    pub fn reset_qos(&mut self) {
        self.qos = None;
    }

    pub fn set_nodes(&mut self, nodes: Vec<::models::Node>) {
        self.nodes = Some(nodes);
    }

    pub fn with_nodes(mut self, nodes: Vec<::models::Node>) -> Job {
        self.nodes = Some(nodes);
        self
    }

    pub fn nodes(&self) -> Option<&Vec<::models::Node>> {
        self.nodes.as_ref()
    }

    pub fn reset_nodes(&mut self) {
        self.nodes = None;
    }

    pub fn set_num_cpus(&mut self, num_cpus: i32) {
        self.num_cpus = Some(num_cpus);
    }

    pub fn with_num_cpus(mut self, num_cpus: i32) -> Job {
        self.num_cpus = Some(num_cpus);
        self
    }

    pub fn num_cpus(&self) -> Option<&i32> {
        self.num_cpus.as_ref()
    }

    pub fn reset_num_cpus(&mut self) {
        self.num_cpus = None;
    }

    pub fn set_num_req_nodes(&mut self, num_req_nodes: i32) {
        self.num_req_nodes = Some(num_req_nodes);
    }

    pub fn with_num_req_nodes(mut self, num_req_nodes: i32) -> Job {
        self.num_req_nodes = Some(num_req_nodes);
        self
    }

    pub fn num_req_nodes(&self) -> Option<&i32> {
        self.num_req_nodes.as_ref()
    }

    pub fn reset_num_req_nodes(&mut self) {
        self.num_req_nodes = None;
    }

    pub fn set_num_alloc_nodes(&mut self, num_alloc_nodes: i32) {
        self.num_alloc_nodes = Some(num_alloc_nodes);
    }

    pub fn with_num_alloc_nodes(mut self, num_alloc_nodes: i32) -> Job {
        self.num_alloc_nodes = Some(num_alloc_nodes);
        self
    }

    pub fn num_alloc_nodes(&self) -> Option<&i32> {
        self.num_alloc_nodes.as_ref()
    }

    pub fn reset_num_alloc_nodes(&mut self) {
        self.num_alloc_nodes = None;
    }

    pub fn set_raw_time(&mut self, raw_time: f32) {
        self.raw_time = Some(raw_time);
    }

    pub fn with_raw_time(mut self, raw_time: f32) -> Job {
        self.raw_time = Some(raw_time);
        self
    }

    pub fn raw_time(&self) -> Option<&f32> {
        self.raw_time.as_ref()
    }

    pub fn reset_raw_time(&mut self) {
        self.raw_time = None;
    }

    pub fn set_cpu_time(&mut self, cpu_time: f32) {
        self.cpu_time = Some(cpu_time);
    }

    pub fn with_cpu_time(mut self, cpu_time: f32) -> Job {
        self.cpu_time = Some(cpu_time);
        self
    }

    pub fn cpu_time(&self) -> Option<&f32> {
        self.cpu_time.as_ref()
    }

    pub fn reset_cpu_time(&mut self) {
        self.cpu_time = None;
    }
}
