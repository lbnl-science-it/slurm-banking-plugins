/* 
 * myBRC REST API
 *
 * REST API for myBRC
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct JobCreate {
  #[serde(rename = "jobslurmid")]
  jobslurmid: String,
  #[serde(rename = "submitdate")]
  submitdate: Option<String>,
  #[serde(rename = "startdate")]
  startdate: Option<String>,
  #[serde(rename = "enddate")]
  enddate: Option<String>,
  #[serde(rename = "userid")]
  userid: Option<String>,
  #[serde(rename = "accountid")]
  accountid: Option<String>,
  #[serde(rename = "amount")]
  amount: Option<String>,
  #[serde(rename = "jobstatus")]
  jobstatus: Option<String>,
  #[serde(rename = "partition")]
  partition: Option<String>,
  #[serde(rename = "qos")]
  qos: Option<String>
}

impl JobCreate {
  pub fn new(jobslurmid: String) -> JobCreate {
    JobCreate {
      jobslurmid: jobslurmid,
      submitdate: None,
      startdate: None,
      enddate: None,
      userid: None,
      accountid: None,
      amount: None,
      jobstatus: None,
      partition: None,
      qos: None
    }
  }

  pub fn set_jobslurmid(&mut self, jobslurmid: String) {
    self.jobslurmid = jobslurmid;
  }

  pub fn with_jobslurmid(mut self, jobslurmid: String) -> JobCreate {
    self.jobslurmid = jobslurmid;
    self
  }

  pub fn jobslurmid(&self) -> &String {
    &self.jobslurmid
  }


  pub fn set_submitdate(&mut self, submitdate: String) {
    self.submitdate = Some(submitdate);
  }

  pub fn with_submitdate(mut self, submitdate: String) -> JobCreate {
    self.submitdate = Some(submitdate);
    self
  }

  pub fn submitdate(&self) -> Option<&String> {
    self.submitdate.as_ref()
  }

  pub fn reset_submitdate(&mut self) {
    self.submitdate = None;
  }

  pub fn set_startdate(&mut self, startdate: String) {
    self.startdate = Some(startdate);
  }

  pub fn with_startdate(mut self, startdate: String) -> JobCreate {
    self.startdate = Some(startdate);
    self
  }

  pub fn startdate(&self) -> Option<&String> {
    self.startdate.as_ref()
  }

  pub fn reset_startdate(&mut self) {
    self.startdate = None;
  }

  pub fn set_enddate(&mut self, enddate: String) {
    self.enddate = Some(enddate);
  }

  pub fn with_enddate(mut self, enddate: String) -> JobCreate {
    self.enddate = Some(enddate);
    self
  }

  pub fn enddate(&self) -> Option<&String> {
    self.enddate.as_ref()
  }

  pub fn reset_enddate(&mut self) {
    self.enddate = None;
  }

  pub fn set_userid(&mut self, userid: String) {
    self.userid = Some(userid);
  }

  pub fn with_userid(mut self, userid: String) -> JobCreate {
    self.userid = Some(userid);
    self
  }

  pub fn userid(&self) -> Option<&String> {
    self.userid.as_ref()
  }

  pub fn reset_userid(&mut self) {
    self.userid = None;
  }

  pub fn set_accountid(&mut self, accountid: String) {
    self.accountid = Some(accountid);
  }

  pub fn with_accountid(mut self, accountid: String) -> JobCreate {
    self.accountid = Some(accountid);
    self
  }

  pub fn accountid(&self) -> Option<&String> {
    self.accountid.as_ref()
  }

  pub fn reset_accountid(&mut self) {
    self.accountid = None;
  }

  pub fn set_amount(&mut self, amount: String) {
    self.amount = Some(amount);
  }

  pub fn with_amount(mut self, amount: String) -> JobCreate {
    self.amount = Some(amount);
    self
  }

  pub fn amount(&self) -> Option<&String> {
    self.amount.as_ref()
  }

  pub fn reset_amount(&mut self) {
    self.amount = None;
  }

  pub fn set_jobstatus(&mut self, jobstatus: String) {
    self.jobstatus = Some(jobstatus);
  }

  pub fn with_jobstatus(mut self, jobstatus: String) -> JobCreate {
    self.jobstatus = Some(jobstatus);
    self
  }

  pub fn jobstatus(&self) -> Option<&String> {
    self.jobstatus.as_ref()
  }

  pub fn reset_jobstatus(&mut self) {
    self.jobstatus = None;
  }

  pub fn set_partition(&mut self, partition: String) {
    self.partition = Some(partition);
  }

  pub fn with_partition(mut self, partition: String) -> JobCreate {
    self.partition = Some(partition);
    self
  }

  pub fn partition(&self) -> Option<&String> {
    self.partition.as_ref()
  }

  pub fn reset_partition(&mut self) {
    self.partition = None;
  }

  pub fn set_qos(&mut self, qos: String) {
    self.qos = Some(qos);
  }

  pub fn with_qos(mut self, qos: String) -> JobCreate {
    self.qos = Some(qos);
    self
  }

  pub fn qos(&self) -> Option<&String> {
    self.qos.as_ref()
  }

  pub fn reset_qos(&mut self) {
    self.qos = None;
  }

}



