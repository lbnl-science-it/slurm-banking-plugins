/*
 * myBRC REST API
 *
 * REST API for myBRC
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct UploadCpuDataApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl UploadCpuDataApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> UploadCpuDataApiClient {
        UploadCpuDataApiClient { configuration }
    }
}

pub trait UploadCpuDataApi {
    fn upload_cpu_data_update(&self, filename: &str, authorization: &str) -> Result<(), Error>;
}

impl UploadCpuDataApi for UploadCpuDataApiClient {
    fn upload_cpu_data_update(&self, filename: &str, authorization: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/upload_cpu_data/{filename}",
            configuration.base_path,
            filename = crate::apis::urlencode(filename)
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("Authorization", authorization.to_string());
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }
}
