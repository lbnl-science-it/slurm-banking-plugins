/*
 * myBRC REST API
 *
 * REST API for myBRC
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct CanSubmitJobApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl CanSubmitJobApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> CanSubmitJobApiClient {
        CanSubmitJobApiClient { configuration }
    }
}

pub trait CanSubmitJobApi {
    fn can_submit_job_read(
        &self,
        job_cost: &str,
        user_id: &str,
        account_id: &str,
        authorization: &str,
    ) -> Result<crate::models::InlineResponse200, Error>;
}

impl CanSubmitJobApi for CanSubmitJobApiClient {
    fn can_submit_job_read(
        &self,
        job_cost: &str,
        user_id: &str,
        account_id: &str,
        authorization: &str,
    ) -> Result<crate::models::InlineResponse200, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/can_submit_job/{job_cost}/{user_id}/{account_id}/",
            configuration.base_path,
            job_cost = crate::apis::urlencode(job_cost),
            user_id = crate::apis::urlencode(user_id),
            account_id = crate::apis::urlencode(account_id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("Authorization", authorization.to_string());
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
